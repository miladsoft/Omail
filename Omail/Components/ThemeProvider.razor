@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@implements IDisposable

<CascadingValue Value="@isDarkMode" Name="IsDarkMode">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool isDarkMode;

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChange += HandleThemeChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeService.InitializeThemeAsync();
            isDarkMode = ThemeService.IsDarkMode;
            StateHasChanged();
        }
    }

    private void HandleThemeChanged(object sender, ThemeChangedEventArgs e)
    {
        isDarkMode = e.IsDarkMode;
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.OnThemeChange -= HandleThemeChanged;
    }
}
