@inject ThemeService ThemeService
@implements IDisposable

<button @onclick="ToggleTheme"
        class="p-2 rounded-full text-omail-500 dark:text-omail-400 hover:text-omail-700 dark:hover:text-omail-300 hover:bg-omail-100 dark:hover:bg-omail-700 focus:outline-none transition-colors duration-200"
        aria-label="Toggle theme">
    @if (isDarkMode)
    {
        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
    }
    else
    {
        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
    }
</button>

@code {
    private bool isDarkMode;

    protected override void OnInitialized()
    {
        isDarkMode = ThemeService.IsDarkMode;
        ThemeService.OnThemeChange += HandleThemeChange;
    }

    private async Task ToggleTheme()
    {
        // Ensure we are not following the system theme when toggling manually
        await ThemeService.SetSystemTheme(false);
        // Toggle the dark mode state
        await ThemeService.SetDarkMode(!isDarkMode);
        // The HandleThemeChange event will update the local isDarkMode state and trigger UI refresh.
    }

    private void HandleThemeChange(object sender, ThemeChangedEventArgs e)
    {
        isDarkMode = e.IsDarkMode;
        InvokeAsync(StateHasChanged); // Ensure UI updates on the correct thread
    }

    public void Dispose()
    {
        ThemeService.OnThemeChange -= HandleThemeChange;
    }
}
