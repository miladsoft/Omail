@inject IToastService ToastService
@implements IDisposable
@using Omail.Services

<div class="fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-xs">
    @foreach (var toast in ToastService.GetToasts())
    {
        <div class="@GetToastClasses(toast.Type) rounded-lg shadow-lg p-4 transform transition-all duration-300 animate-fade-in">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    @switch (toast.Type)
                    {
                        case ToastType.Success:
                            <svg class="h-5 w-5 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            break;
                        case ToastType.Error:
                            <svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            break;
                        case ToastType.Warning:
                            <svg class="h-5 w-5 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                            break;
                        default:
                            <svg class="h-5 w-5 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            break;
                    }
                </div>
                <div class="ml-3 flex-1">
                    <p class="text-sm font-medium text-gray-800 dark:text-white">@toast.Content</p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button @onclick="() => ToastService.RemoveToast(toast.Id)"
                            class="bg-transparent rounded-md inline-flex text-gray-400 hover:text-gray-500">
                        <span class="sr-only">Close</span>
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ToastService.OnToastsChanged += StateHasChanged;
    }

    private string GetToastClasses(ToastType type)
    {
        return type switch
        {
            ToastType.Success => "bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800",
            ToastType.Error => "bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800",
            ToastType.Warning => "bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800",
            ToastType.Info => "bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800",
            _ => "bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
        };
    }

    public void Dispose()
    {
        ToastService.OnToastsChanged -= StateHasChanged;
    }
}
