@page "/weather"
@inject HttpClient Http
@using System.Net.Http.Json

<PageTitle>Weather - Omail UI</PageTitle>

<div class="card dark:bg-omail-dark/30 bg-white shadow-md rounded-lg overflow-hidden transition-colors duration-300">
    <div class="p-6">
        <h1 class="text-3xl font-bold text-omail-primary dark:text-omail-light mb-4 transition-colors duration-300">Weather Forecast</h1>

        <p class="text-gray-600 dark:text-omail-light/80 mb-6 transition-colors duration-300">This component demonstrates fetching data from a service.</p>

        @if (forecasts == null)
        {
            <div class="py-8 flex flex-col items-center justify-center">
                <div class="w-16 h-16 border-4 border-omail-primary border-t-transparent rounded-full animate-spin"></div>
                <p class="mt-4 text-omail-primary dark:text-omail-light transition-colors duration-300"><em>Loading weather data...</em></p>
            </div>
        }
        else
        {
            <div class="overflow-x-auto bg-white dark:bg-omail-dark/50 rounded-lg shadow-sm transition-colors duration-300">
                <table class="min-w-full divide-y divide-omail-200 dark:divide-omail-700">
                    <thead class="bg-omail-light/30 dark:bg-omail-primary/30">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-primary uppercase tracking-wider dark:text-omail-light transition-colors duration-300">Date</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-primary uppercase tracking-wider dark:text-omail-light transition-colors duration-300" aria-label="Temperature in Celsius">Temp. (C)</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-primary uppercase tracking-wider dark:text-omail-light transition-colors duration-300" aria-label="Temperature in Fahrenheit">Temp. (F)</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-primary uppercase tracking-wider dark:text-omail-light transition-colors duration-300">Summary</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-transparent divide-y divide-omail-200 dark:divide-omail-700">
                        @foreach (var forecast in forecasts)
                        {
                            <tr class="hover:bg-omail-light/10 dark:hover:bg-omail-primary/10 transition-colors duration-300">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-omail-900 dark:text-omail-light/90 transition-colors duration-300">@forecast.Date.ToShortDateString()</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-omail-800 dark:text-omail-light/80 transition-colors duration-300">@forecast.TemperatureC°</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-omail-800 dark:text-omail-light/80 transition-colors duration-300">@forecast.TemperatureF°</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@GetSummaryClass(forecast.Summary) px-3 py-1 rounded-full text-xs font-medium">
                                        @forecast.Summary
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private string GetSummaryClass(string? summary)
    {
        return summary switch
        {
            "Freezing" => "bg-omail-100 text-omail-800 dark:bg-omail-800/20 dark:text-omail-300",
            "Bracing" => "bg-omail-50 text-omail-800 dark:bg-omail-800/20 dark:text-omail-200",
            "Chilly" => "bg-omail-100 text-omail-700 dark:bg-omail-700/20 dark:text-omail-300",
            "Cool" => "bg-omail-200 text-omail-600 dark:bg-omail-600/20 dark:text-omail-300",
            "Mild" => "bg-omail-100 text-omail-600 dark:bg-omail-600/20 dark:text-omail-200",
            "Warm" => "bg-omail-200 text-omail-700 dark:bg-omail-700/20 dark:text-omail-300",
            "Balmy" => "bg-omail-100 text-omail-800 dark:bg-omail-800/20 dark:text-omail-300",
            "Hot" => "bg-omail-200 text-omail-700 dark:bg-omail-700/20 dark:text-omail-300",
            "Sweltering" => "bg-omail-100 text-omail-800 dark:bg-omail-800/20 dark:text-omail-300",
            "Scorching" => "bg-omail-200 text-omail-700 dark:bg-omail-700/20 dark:text-omail-300",
            _ => "bg-omail-100 text-omail-800 dark:bg-omail-800/20 dark:text-omail-300"
        };
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
