@page "/admin/users/{Id:int}"
@attribute [Authorize(Roles = "Manager")]
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject EmailService EmailService

<PageTitle>User Details - Omail Admin</PageTitle>

<div class="space-y-6">
    @if (isLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="flex flex-col items-center space-y-4">
                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-omail-600"></div>
                <p class="text-omail-600 dark:text-omail-400">Loading user details...</p>
            </div>
        </div>
    }
    else if (user == null)
    {
        <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-8 text-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-omail-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <h3 class="text-xl font-medium text-omail-800 dark:text-white mb-2">User Not Found</h3>
            <p class="text-omail-600 dark:text-omail-300 mb-4">The user you're looking for doesn't exist or has been deleted.</p>
            <button @onclick="GoToUserList" class="inline-flex items-center px-4 py-2 bg-omail-600 hover:bg-omail-700 text-white rounded-lg transition-all duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Return to Users
            </button>
        </div>
    }
    else
    {
        <AdminHeader 
            Title="@user.FullName" 
            Description="@($"{user.Position} in {departmentName} department")" 
            PrimaryButtonText="Back to Users" 
            PrimaryButtonUrl="admin/users"
            PrimaryButtonIcon="back" 
            SecondaryButtonText="Edit Profile" 
            SecondaryButtonUrl="@($"admin/users/edit/{Id}")"
            SecondaryButtonIcon="edit" />
            
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- User Profile Card -->
            <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
                <div class="relative">
                    <div class="bg-gradient-to-r from-omail-500 to-omail-700 h-32"></div>
                    <div class="absolute inset-0 flex items-center justify-center">
                        <div class="bg-white dark:bg-omail-800 p-2 rounded-full shadow-xl">
                            @if (string.IsNullOrEmpty(user.ProfilePicture))
                            {
                                <div class="h-24 w-24 rounded-full bg-omail-100 dark:bg-omail-700 flex items-center justify-center text-omail-700 dark:text-omail-200 text-4xl font-medium">
                                    @user.Initials
                                </div>
                            }
                            else
                            {
                                <img class="h-24 w-24 rounded-full" src="@user.ProfilePicture" alt="@user.FullName" />
                            }
                        </div>
                    </div>
                </div>
                
                <div class="pt-16 pb-6 px-6 text-center">
                    <h3 class="text-xl font-medium text-omail-800 dark:text-white">@user.FullName</h3>
                    <p class="text-omail-500 dark:text-omail-400">@(string.IsNullOrEmpty(user.Position) ? "No position" : user.Position)</p>
                    
                    <div class="flex justify-center mt-4 space-x-2">
                        <a href="mailto:@(user.Email)" class="p-2 bg-omail-50 text-omail-700 hover:bg-omail-100 dark:bg-omail-700/30 dark:text-omail-300 dark:hover:bg-omail-700/50 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                        </a>
                        @if (!string.IsNullOrEmpty(user.PhoneNumber))
                        {
                            <a href="tel:@(user.PhoneNumber)" class="p-2 bg-omail-50 text-omail-700 hover:bg-omail-100 dark:bg-omail-700/30 dark:text-omail-300 dark:hover:bg-omail-700/50 rounded-lg">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                </svg>
                            </a>
                        }
                        <button @onclick="ImpersonateUser" class="p-2 bg-omail-50 text-omail-700 hover:bg-omail-100 dark:bg-omail-700/30 dark:text-omail-300 dark:hover:bg-omail-700/50 rounded-lg" title="Login as this user">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                        </button>
                    </div>
                    
                    <div class="mt-6 pt-4 border-t border-omail-100 dark:border-omail-700 text-left">
                        <div class="mb-3">
                            <div class="text-xs text-omail-500 dark:text-omail-400">Email</div>
                            <div class="text-sm text-omail-800 dark:text-omail-200">@user.Email</div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(user.PhoneNumber))
                        {
                            <div class="mb-3">
                                <div class="text-xs text-omail-500 dark:text-omail-400">Phone</div>
                                <div class="text-sm text-omail-800 dark:text-omail-200">@user.PhoneNumber</div>
                            </div>
                        }
                        
                        <div class="mb-3">
                            <div class="text-xs text-omail-500 dark:text-omail-400">Department</div>
                            <div class="text-sm text-omail-800 dark:text-omail-200">@departmentName</div>
                        </div>
                        
                        <div class="mb-3">
                            <div class="text-xs text-omail-500 dark:text-omail-400">Section</div>
                            <div class="text-sm text-omail-800 dark:text-omail-200">@sectionName</div>
                        </div>
                        
                        <div class="mb-3">
                            <div class="text-xs text-omail-500 dark:text-omail-400">Hire Date</div>
                            <div class="text-sm text-omail-800 dark:text-omail-200">@user.HireDate.ToString("MMMM d, yyyy")</div>
                        </div>
                        
                        <div class="mb-3">
                            <div class="text-xs text-omail-500 dark:text-omail-400">Role</div>
                            <div class="text-sm">
                                @if (user.IsManager)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">
                                        Manager
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-omail-100 text-omail-800 dark:bg-omail-800/30 dark:text-omail-300">
                                        Regular User
                                    </span>
                                }
                            </div>
                        </div>
                        
                        <div>
                            <div class="text-xs text-omail-500 dark:text-omail-400">Status</div>
                            <div class="text-sm">
                                @if (user.IsActive)
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
                                        Active
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400">
                                        Inactive
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="px-6 py-4 bg-omail-50 dark:bg-omail-800/70 border-t border-omail-100 dark:border-omail-700 flex justify-end space-x-2">
                    <button @onclick="@(() => NavigationManager.NavigateTo($"admin/users/edit/{Id}"))" class="text-omail-600 hover:text-omail-800 dark:text-omail-400 dark:hover:text-omail-200">Edit</button>
                    <button @onclick="ResetPassword" class="text-omail-600 hover:text-omail-800 dark:text-omail-400 dark:hover:text-omail-200">Reset Password</button>
                </div>
            </div>
            
            <!-- Activity and Stats Section -->
            <div class="lg:col-span-2 space-y-6">
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
                    <!-- Rest of the component remains unchanged -->
                    <!-- ... existing code ... -->
                </div>
                
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
                    <!-- Rest of the component remains unchanged -->
                    <!-- ... existing code ... -->
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private bool isLoading = true;
    private UserDetailModel user;
    private string departmentName;
    private string sectionName;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDetails();
    }
    
    private async Task LoadUserDetails()
    {
        try
        {
            isLoading = true;
            
            var employee = await AuthService.GetUserByIdAsync(Id);
            
            if (employee != null)
            {
                user = new UserDetailModel
                {
                    Id = employee.Id,
                    FirstName = employee.FirstName,
                    LastName = employee.LastName,
                    FullName = $"{employee.FirstName} {employee.LastName}",
                    Email = employee.Email,
                    ProfilePicture = employee.ProfilePicture,
                    Position = employee.Position,
                    PhoneNumber = employee.PhoneNumber,
                    IsManager = employee.IsManager,
                    IsActive = employee.IsActive,
                    HireDate = employee.HireDate
                };
                
                departmentName = employee.Section?.Department?.Name ?? "-";
                sectionName = employee.Section?.Name ?? "-";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading user details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void GoToUserList()
    {
        NavigationManager.NavigateTo("admin/users");
    }
    
    private async Task ResetPassword()
    {
        try
        {
            await AuthService.SendPasswordResetEmailAsync(user.Email);
            await JSRuntime.InvokeVoidAsync("alert", $"Password reset email sent to {user.Email}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error sending password reset email: {ex.Message}");
        }
    }
    
    private async Task ImpersonateUser()
    {
        try
        {
            await AuthService.ImpersonateUserAsync(user.Id);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error impersonating user: {ex.Message}");
        }
    }
    
    public class UserDetailModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string ProfilePicture { get; set; }
        public string Position { get; set; }
        public string PhoneNumber { get; set; }
        public bool IsManager { get; set; }
        public bool IsActive { get; set; }
        public DateTime HireDate { get; set; }
        
        public string Initials => $"{FirstName?.FirstOrDefault() ?? '?'}{LastName?.FirstOrDefault() ?? '?'}";
    }
}
