@page "/admin/profile"
@attribute [Authorize]
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

<PageTitle>My Profile - Omail Admin</PageTitle>

<div class="space-y-6">
    <AdminHeader 
        Title="My Profile" 
        Description="View and edit your profile information" 
        PrimaryButtonUrl="/admin" 
        PrimaryButtonText="Back to Dashboard" />

    @if (isLoading)
    {
        <div class="flex justify-center items-center py-12">
            <div class="spinner"></div>
        </div>
    }
    else if (currentUser == null)
    {
        <div class="flex flex-col items-center justify-center py-12 text-center">
            <div class="text-omail-500 dark:text-omail-400 mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
            <h3 class="text-xl font-medium text-omail-900 dark:text-white">User not found</h3>
            <p class="text-omail-500 dark:text-omail-400 mt-2">There was an error retrieving your profile information.</p>
            <button @onclick="@(() => NavigationManager.NavigateTo("/"))" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-omail-600 hover:bg-omail-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-omail-500">
                Return to Home
            </button>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Profile Overview -->
            <div class="lg:col-span-1 space-y-6">
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6 text-center">
                    <div class="relative mx-auto w-32 h-32 mb-4">
                        @if (string.IsNullOrEmpty(currentUser.ProfilePicture))
                        {
                            <div class="w-32 h-32 rounded-full bg-omail-200 dark:bg-omail-700 flex items-center justify-center text-omail-700 dark:text-omail-200 text-4xl font-medium">
                                @currentUser.Initials
                            </div>
                        }
                        else
                        {
                            <img class="w-32 h-32 rounded-full object-cover" src="@currentUser.ProfilePicture" alt="@currentUser.FullName" />
                        }
                        
                        <div class="absolute bottom-0 right-0">
                            <button @onclick="ClickFileInput" class="bg-white dark:bg-omail-700 rounded-full p-2 shadow-md border border-omail-200 dark:border-omail-600 hover:bg-omail-50 dark:hover:bg-omail-600 transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-omail-600 dark:text-omail-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                            </button>
                            <InputFile id="profilePictureUpload" OnChange="UploadProfilePicture" hidden />
                        </div>
                    </div>
                    
                    <h3 class="text-xl font-medium text-omail-900 dark:text-white">@currentUser.FullName</h3>
                    <p class="text-omail-500 dark:text-omail-400">@currentUser.Position</p>
                    
                    <div class="flex justify-center mt-4 space-x-2">
                        @if (currentUser.IsManager)
                        {
                            <span class="bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400 px-2 py-1 rounded-full text-xs font-medium">
                                Manager
                            </span>
                        }
                        
                        <span class="bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400 px-2 py-1 rounded-full text-xs font-medium">
                            Active User
                        </span>
                    </div>
                </div>
                
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
                    <h3 class="text-lg font-medium text-omail-800 dark:text-white mb-4">Contact Information</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300">Email Address</label>
                            <div class="mt-1 text-omail-900 dark:text-white">@currentUser.Email</div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300">Phone Number</label>
                            <div class="mt-1 text-omail-900 dark:text-white">@(string.IsNullOrEmpty(currentUser.PhoneNumber) ? "Not provided" : currentUser.PhoneNumber)</div>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
                    <h3 class="text-lg font-medium text-omail-800 dark:text-white mb-4">Organization</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300">Department</label>
                            <div class="mt-1 text-omail-900 dark:text-white">@department?.Name</div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300">Section</label>
                            <div class="mt-1 text-omail-900 dark:text-white">@currentUser.Section?.Name</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Profile Edit Forms -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Profile Information Form -->
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
                    <h3 class="text-lg font-medium text-omail-800 dark:text-white mb-4">Edit Profile Information</h3>
                    
                    <EditForm Model="profileModel" OnValidSubmit="UpdateProfile">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-red-500 dark:text-red-400 text-sm mb-4" />
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="firstName" class="block text-sm font-medium text-omail-700 dark:text-omail-300">First Name</label>
                                <InputText id="firstName" @bind-Value="profileModel.FirstName" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                                <ValidationMessage For="@(() => profileModel.FirstName)" class="text-red-500 text-xs mt-1" />
                            </div>
                            
                            <div>
                                <label for="lastName" class="block text-sm font-medium text-omail-700 dark:text-omail-300">Last Name</label>
                                <InputText id="lastName" @bind-Value="profileModel.LastName" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                                <ValidationMessage For="@(() => profileModel.LastName)" class="text-red-500 text-xs mt-1" />
                            </div>
                            
                            <div>
                                <label for="phoneNumber" class="block text-sm font-medium text-omail-700 dark:text-omail-300">Phone Number</label>
                                <InputText id="phoneNumber" @bind-Value="profileModel.PhoneNumber" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                                <ValidationMessage For="@(() => profileModel.PhoneNumber)" class="text-red-500 text-xs mt-1" />
                            </div>
                            
                            <div>
                                <label for="position" class="block text-sm font-medium text-omail-700 dark:text-omail-300">Position</label>
                                <InputText id="position" @bind-Value="profileModel.Position" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                                <ValidationMessage For="@(() => profileModel.Position)" class="text-red-500 text-xs mt-1" />
                            </div>
                        </div>
                        
                        <div class="mt-6">
                            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-omail-600 hover:bg-omail-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-omail-500" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="mr-2">Saving...</span>
                                    <div class="spinner-sm"></div>
                                }
                                else
                                {
                                    <span>Save Changes</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                
                <!-- Change Password Form -->
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
                    <h3 class="text-lg font-medium text-omail-800 dark:text-white mb-4">Change Password</h3>
                    
                    <button @onclick="ShowChangePasswordDialog" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-omail-600 hover:bg-omail-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-omail-500">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                        Change Password
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Change Password Dialog -->
@if (showChangePasswordDialog)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-omail-800 p-6 rounded-xl shadow-xl max-w-md w-full">
            <h3 class="text-lg font-bold text-omail-900 dark:text-white mb-4">Change Your Password</h3>
            
            <EditForm Model="passwordModel" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500 dark:text-red-400 text-sm mb-4" />
                
                <div class="space-y-4">
                    <div>
                        <label for="currentPassword" class="block text-sm font-medium text-omail-700 dark:text-omail-300">Current Password</label>
                        <InputText type="password" id="currentPassword" @bind-Value="passwordModel.CurrentPassword" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                        <ValidationMessage For="@(() => passwordModel.CurrentPassword)" class="text-red-500 text-xs mt-1" />
                    </div>
                    
                    <div>
                        <label for="newPassword" class="block text-sm font-medium text-omail-700 dark:text-omail-300">New Password</label>
                        <InputText type="password" id="newPassword" @bind-Value="passwordModel.NewPassword" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                        <ValidationMessage For="@(() => passwordModel.NewPassword)" class="text-red-500 text-xs mt-1" />
                    </div>
                    
                    <div>
                        <label for="confirmPassword" class="block text-sm font-medium text-omail-700 dark:text-omail-300">Confirm New Password</label>
                        <InputText type="password" id="confirmPassword" @bind-Value="passwordModel.ConfirmPassword" class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" />
                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" class="text-red-500 text-xs mt-1" />
                    </div>
                </div>
                
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" @onclick="HideChangePasswordDialog" class="inline-flex items-center px-4 py-2 border border-omail-300 dark:border-omail-600 text-sm font-medium rounded-md shadow-sm text-omail-700 dark:text-omail-200 bg-white dark:bg-omail-800/50 hover:bg-omail-50 dark:hover:bg-omail-700/50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-omail-500">
                        Cancel
                    </button>
                    <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-omail-600 hover:bg-omail-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-omail-500">
                        @if (isSavingPassword)
                        {
                            <span class="mr-2">Changing...</span>
                            <div class="spinner-sm"></div>
                        }
                        else
                        {
                            <span>Change Password</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private Employee currentUser;
    private Department department;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isSavingPassword = false;
    private bool showChangePasswordDialog = false;
    private ProfileModel profileModel = new ProfileModel();
    private PasswordChangeModel passwordModel = new PasswordChangeModel();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.clickFileInputElement", 
                DotNetObjectReference.Create(this));
        }
    }
    
    [JSInvokable]
    public void TriggerFileInput()
    {
        // This method will be called from JavaScript
    }
    
    private async Task ClickFileInput()
    {
        await JSRuntime.InvokeVoidAsync("clickFileInput", "profilePictureUpload");
    }
    
    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            
            // Get the current user
            currentUser = await AuthService.GetCurrentUserAsync();
            
            if (currentUser != null)
            {
                // Initialize the profile model
                profileModel.FirstName = currentUser.FirstName;
                profileModel.LastName = currentUser.LastName;
                profileModel.PhoneNumber = currentUser.PhoneNumber;
                profileModel.Position = currentUser.Position;
                
                // Get the department
                if (currentUser.Section != null)
                {
                    department = currentUser.Section.Department;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UpdateProfile()
    {
        try
        {
            isSaving = true;
            
            // Update profile
            await AuthService.UpdateProfileAsync(currentUser.Id, profileModel);
            
            await JSRuntime.InvokeVoidAsync("alert", "Profile updated successfully!");
            
            // Refresh user data
            await LoadUserProfile();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating profile: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void ShowChangePasswordDialog()
    {
        passwordModel = new PasswordChangeModel();
        showChangePasswordDialog = true;
    }
    
    private void HideChangePasswordDialog()
    {
        showChangePasswordDialog = false;
    }
    
    private async Task ChangePassword()
    {
        try
        {
            isSavingPassword = true;
            
            // Change password
            await AuthService.ChangePasswordAsync(
                currentUser.Id,
                passwordModel.CurrentPassword,
                passwordModel.NewPassword
            );
            
            await JSRuntime.InvokeVoidAsync("alert", "Password changed successfully!");
            
            HideChangePasswordDialog();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {ex.Message}");
        }
        finally
        {
            isSavingPassword = false;
        }
    }
    
    private async Task UploadProfilePicture(InputFileChangeEventArgs e)
    {
        try
        {
            // Check file size (max 5MB)
            if (e.File.Size > 5 * 1024 * 1024)
            {
                await JSRuntime.InvokeVoidAsync("alert", "File size exceeds the limit of 5MB.");
                return;
            }
            
            // Check file type
            var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif" };
            if (!allowedTypes.Contains(e.File.ContentType))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Only JPEG, PNG, and GIF images are allowed.");
                return;
            }
            
            // Read the file
            var buffer = new byte[e.File.Size];
            await e.File.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
            
            // Convert to base64
            var base64 = Convert.ToBase64String(buffer);
            var imageData = $"data:{e.File.ContentType};base64,{base64}";
            
            // Update profile picture
            await AuthService.UpdateProfilePictureAsync(currentUser.Id, imageData);
            
            // Refresh user data
            await LoadUserProfile();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error uploading profile picture: {ex.Message}");
        }
    }
    
    public class ProfileModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(100, ErrorMessage = "First name cannot exceed 100 characters")]
        public string FirstName { get; set; }
        
        [Required(ErrorMessage = "Last name is required")]
        [StringLength(100, ErrorMessage = "Last name cannot exceed 100 characters")]
        public string LastName { get; set; }
        
        [Phone(ErrorMessage = "Invalid phone number format")]
        [StringLength(15, ErrorMessage = "Phone number cannot exceed 15 characters")]
        public string PhoneNumber { get; set; }
        
        [StringLength(100, ErrorMessage = "Position cannot exceed 100 characters")]
        public string Position { get; set; }
    }
    
    public class PasswordChangeModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; }
        
        [Required(ErrorMessage = "New password is required")]
        [MinLength(8, ErrorMessage = "New password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$", ErrorMessage = "New password must contain at least one uppercase letter, one lowercase letter, and one number")]
        public string NewPassword { get; set; }
        
        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "Password and confirmation do not match")]
        public string ConfirmPassword { get; set; }
    }
}
