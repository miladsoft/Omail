@page "/admin/users/grid"
@attribute [Authorize(Roles = "Manager")]
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Users Grid - Omail Admin</PageTitle>

<div class="space-y-6">
    <AdminHeader 
        Title="User Management" 
        Description="Manage users, permissions and account settings" 
        PrimaryButtonText="Add New User" 
        PrimaryButtonUrl="admin/users/new"
        PrimaryButtonIcon="" 
        SecondaryButtonText="Bulk Import" 
        SecondaryButtonUrl="admin/users/import"
        SecondaryButtonIcon="" />
    
    <!-- View Toggle -->
    <div class="flex justify-end mb-4">
        <div class="inline-flex rounded-md shadow-sm">
            <a href="admin/users" class="px-4 py-2 text-sm font-medium text-omail-700 dark:text-omail-300 bg-white dark:bg-omail-800 border border-omail-200 dark:border-omail-700 rounded-l-lg hover:bg-omail-100 dark:hover:bg-omail-700/50">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                </svg>
            </a>
            <a href="admin/users/grid" class="px-4 py-2 text-sm font-medium bg-omail-100 dark:bg-omail-700 text-omail-800 dark:text-white border border-omail-200 dark:border-omail-700 rounded-r-lg hover:bg-omail-200 dark:hover:bg-omail-600">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                </svg>
            </a>
        </div>
    </div>
    
    <!-- Search and Filters -->
    <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
        <div class="flex flex-col md:flex-row gap-4">
            <div class="flex-grow">
                <div class="relative">
                    <input 
                        type="text" 
                        @bind-value="searchQuery" 
                        @bind-value:event="oninput" 
                        placeholder="Search users by name, email or position..."
                        class="w-full px-4 py-2 pl-10 pr-8 border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400" />
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center">
                        <svg class="h-5 w-5 text-omail-400 dark:text-omail-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(searchQuery))
                    {
                        <button @onclick="ClearSearch" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <svg class="h-5 w-5 text-omail-400 hover:text-omail-500 dark:text-omail-500 dark:hover:text-omail-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    }
                </div>
            </div>
            
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="w-full sm:w-40">
                    <select 
                        @bind="selectedDepartment" 
                        class="w-full px-4 py-2 border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400">
                        <option value="0">All Departments</option>
                        @foreach (var dept in departments)
                        {
                            <option value="@dept.Id">@dept.Name</option>
                        }
                    </select>
                </div>
                
                <div class="w-full sm:w-36">
                    <select 
                        @bind="selectedRole" 
                        class="w-full px-4 py-2 border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400">
                        <option value="all">All Roles</option>
                        <option value="manager">Managers</option>
                        <option value="user">Regular Users</option>
                    </select>
                </div>
                
                <div class="w-full sm:w-36">
                    <select 
                        @bind="selectedStatus" 
                        class="w-full px-4 py-2 border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400">
                        <option value="all">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Grid View -->
    <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
        <div class="px-6 py-4 border-b border-omail-100 dark:border-omail-700 flex justify-between items-center">
            <h3 class="text-lg font-medium text-omail-800 dark:text-white">All Users</h3>
            <div class="bg-omail-100 dark:bg-omail-700/50 text-xs text-omail-800 dark:text-omail-200 font-medium px-2.5 py-0.5 rounded-full">
                @filteredUsers.Count() users
            </div>
        </div>
        
        @if (isLoading)
        {
            <div class="py-20 flex justify-center items-center">
                <div class="flex flex-col items-center space-y-4">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-omail-600"></div>
                    <p class="text-omail-600 dark:text-omail-400">Loading users...</p>
                </div>
            </div>
        }
        else if (!filteredUsers.Any())
        {
            <div class="py-16 flex flex-col items-center justify-center text-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-omail-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                <h3 class="text-lg font-medium text-omail-900 dark:text-omail-100 mb-1">No users found</h3>
                <p class="text-sm text-omail-500 dark:text-omail-400 mb-4 max-w-md">
                    @if (!string.IsNullOrEmpty(searchQuery) || selectedDepartment != 0 || selectedRole != "all" || selectedStatus != "all")
                    {
                        <span>No users match your search criteria. Try adjusting your filters.</span>
                    }
                    else
                    {
                        <span>No users found in the system. Start by adding a new user.</span>
                    }
                </p>
                <button @onclick="@(() => NavigationManager.NavigateTo("admin/users/new"))" class="flex items-center space-x-2 bg-omail-600 hover:bg-omail-700 text-white px-4 py-2 rounded-lg transition-all duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                    </svg>
                    <span>Add New User</span>
                </button>
            </div>
        }
        else
        {
            <div class="p-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    @foreach (var user in pagedUsers)
                    {
                        <AdminUserCard User="user" OnDeleteClick="DeleteUser" />
                    }
                </div>
            </div>
        }
        
        <!-- Pagination -->
        @if (totalPages > 1)
        {
            <div class="px-6 py-4 border-t border-omail-100 dark:border-omail-700">
                <div class="flex justify-between items-center">
                    <div class="text-sm text-omail-600 dark:text-omail-400">
                        Showing <span class="font-medium text-omail-800 dark:text-white">@(currentPage * pageSize + 1)</span> to 
                        <span class="font-medium text-omail-800 dark:text-white">@Math.Min((currentPage + 1) * pageSize, filteredUsers.Count())</span> of 
                        <span class="font-medium text-omail-800 dark:text-white">@filteredUsers.Count()</span> users
                    </div>
                    <div class="flex space-x-2">
                        <button 
                            @onclick="PreviousPage" 
                            disabled="@(currentPage == 0)"
                            class="px-3 py-1 rounded-md border border-omail-200 dark:border-omail-700 @(currentPage == 0 ? "bg-omail-50 dark:bg-omail-900 text-omail-400 dark:text-omail-600 cursor-not-allowed" : "bg-white dark:bg-omail-800 text-omail-700 dark:text-omail-300 hover:bg-omail-100 dark:hover:bg-omail-700/50")">
                            Previous
                        </button>
                        @for (int i = 0; i < totalPages; i++)
                        {
                            var pageNumber = i;
                            <button 
                                @onclick="() => GoToPage(pageNumber)" 
                                class="px-3 py-1 rounded-md border @(currentPage == pageNumber ? "bg-omail-600 border-omail-600 text-white" : "bg-white dark:bg-omail-800 border-omail-200 dark:border-omail-700 text-omail-700 dark:text-omail-300 hover:bg-omail-100 dark:hover:bg-omail-700/50")">
                                @(pageNumber + 1)
                            </button>
                        }
                        <button 
                            @onclick="NextPage" 
                            disabled="@(currentPage == totalPages - 1)"
                            class="px-3 py-1 rounded-md border border-omail-200 dark:border-omail-700 @(currentPage == totalPages - 1 ? "bg-omail-50 dark:bg-omail-900 text-omail-400 dark:text-omail-600 cursor-not-allowed" : "bg-white dark:bg-omail-800 text-omail-700 dark:text-omail-300 hover:bg-omail-100 dark:hover:bg-omail-700/50")">
                            Next
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Dialog -->
@if (showDeleteConfirmation)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-omail-800 p-6 rounded-xl shadow-xl max-w-md w-full">
            <h3 class="text-lg font-bold text-omail-900 dark:text-white mb-2">Delete User</h3>
            <p class="text-omail-600 dark:text-omail-300 mb-6">
                Are you sure you want to delete @selectedUser?.FullName? This action cannot be undone.
            </p>
            <div class="flex justify-end space-x-3">
                <button @onclick="CancelDelete" class="px-4 py-2 border border-omail-300 dark:border-omail-700 rounded-lg text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                    Cancel
                </button>
                <button @onclick="ConfirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<AdminUserCard.UserModel> users = new List<AdminUserCard.UserModel>();
    
    // Filters
    private string searchQuery = "";
    private int selectedDepartment = 0;
    private string selectedRole = "all";
    private string selectedStatus = "all";
    
    // Departments for filter dropdown
    private List<Department> departments = new List<Department>();
    
    // Pagination
    private int currentPage = 0;
    private int pageSize = 8; // Showing fewer users per page for grid view
    private int totalPages => (int)Math.Ceiling(filteredUsers.Count() / (double)pageSize);
    
    // Delete confirmation
    private bool showDeleteConfirmation = false;
    private AdminUserCard.UserModel selectedUser;
    
    private IEnumerable<AdminUserCard.UserModel> filteredUsers => ApplyFilters();
    
    private IEnumerable<AdminUserCard.UserModel> pagedUsers => filteredUsers
        .Skip(currentPage * pageSize)
        .Take(pageSize);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadDepartments();
    }
    
    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            
            var employees = await AuthService.GetAllUsersAsync();
            
            users = employees.Select(e => new AdminUserCard.UserModel
            {
                Id = e.Id,
                FirstName = e.FirstName,
                LastName = e.LastName,
                Email = e.Email,
                Position = e.Position,
                ProfilePicture = e.ProfilePicture,
                IsManager = e.IsManager,
                IsActive = e.IsActive,
                Department = e.Section?.Department?.Name ?? "Unassigned",
                DepartmentId = e.Section?.DepartmentId ?? 0,
                SectionId = e.SectionId,
                HireDate = e.HireDate
            }).ToList();
        }
        catch (Exception ex)
        {
            // Log error
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadDepartments()
    {
        try
        {
            departments = await AuthService.GetAllDepartmentsAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading departments: {ex.Message}");
        }
    }
    
    private IEnumerable<AdminUserCard.UserModel> ApplyFilters()
    {
        var result = users.AsEnumerable();
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            string search = searchQuery.ToLower();
            result = result.Where(u => 
                u.FirstName.ToLower().Contains(search) ||
                u.LastName.ToLower().Contains(search) ||
                u.Email.ToLower().Contains(search) ||
                (u.Position?.ToLower().Contains(search) ?? false) ||
                u.Department.ToLower().Contains(search)
            );
        }
        
        // Apply department filter
        if (selectedDepartment > 0)
        {
            result = result.Where(u => u.DepartmentId == selectedDepartment);
        }
        
        // Apply role filter
        if (selectedRole != "all")
        {
            bool isManager = selectedRole == "manager";
            result = result.Where(u => u.IsManager == isManager);
        }
        
        // Apply status filter
        if (selectedStatus != "all")
        {
            bool isActive = selectedStatus == "active";
            result = result.Where(u => u.IsActive == isActive);
        }
        
        return result;
    }
    
    private void ClearSearch()
    {
        searchQuery = "";
    }
    
    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
        }
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
        }
    }
    
    private void GoToPage(int page)
    {
        currentPage = page;
    }
    
    private void DeleteUser(AdminUserCard.UserModel user)
    {
        selectedUser = user;
        showDeleteConfirmation = true;
    }
    
    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        selectedUser = null;
    }
    
    private async Task ConfirmDelete()
    {
        try
        {
            await AuthService.DeleteUserAsync(selectedUser.Id);
            users.RemoveAll(u => u.Id == selectedUser.Id);
            showDeleteConfirmation = false;
            selectedUser = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
}
