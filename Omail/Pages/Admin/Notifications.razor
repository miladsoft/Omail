@page "/admin/notifications"
@attribute [Authorize(Roles = "Manager")]
@inject AuthService AuthService
@inject ApprovalService ApprovalService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Notifications - Omail Admin</PageTitle>

<div class="space-y-6">
    <AdminHeader 
        Title="Notifications" 
        Description="Manage system notifications and alerts" 
        PrimaryButtonText="Back to Dashboard" 
        PrimaryButtonUrl="admin"
        PrimaryButtonIcon="https://cdn.lordicon.com/iifryyua.json" />
    
    <div class="space-y-4">
        <!-- Filter Controls -->
        <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
            <div class="flex flex-col md:flex-row gap-4">
                <div class="flex-1">
                    <label for="filter-type" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Filter by Type</label>
                    <select 
                        id="filter-type" 
                        @bind="selectedTypeFilter" 
                        class="w-full rounded-lg border border-omail-200 dark:border-omail-700 bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 transition-all duration-300">
                        <option value="all">All Types</option>
                        <option value="approval">Approval Requests</option>
                        <option value="user">User Notifications</option>
                        <option value="system">System Alerts</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label for="filter-status" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Filter by Status</label>
                    <select 
                        id="filter-status" 
                        @bind="selectedStatusFilter" 
                        class="w-full rounded-lg border border-omail-200 dark:border-omail-700 bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 transition-all duration-300">
                        <option value="all">All Status</option>
                        <option value="unread">Unread</option>
                        <option value="read">Read</option>
                    </select>
                </div>
                <div class="flex-1">
                    <label for="filter-date" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Filter by Date</label>
                    <select 
                        id="filter-date" 
                        @bind="selectedDateFilter" 
                        class="w-full rounded-lg border border-omail-200 dark:border-omail-700 bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 transition-all duration-300">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="week">Last 7 days</option>
                        <option value="month">Last 30 days</option>
                    </select>
                </div>
                <div class="self-end">
                    <button @onclick="ApplyFilters" class="w-full md:w-auto px-4 py-2 bg-omail-600 text-white rounded-lg hover:bg-omail-700 transition-colors duration-200">
                        Apply Filters
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Notifications List -->
        <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
            <div class="px-6 py-4 border-b border-omail-200 dark:border-omail-700 flex items-center justify-between">
                <div class="flex items-center">
                    <h3 class="text-lg font-semibold text-omail-800 dark:text-white">Notifications</h3>
                    <div class="ml-2 bg-omail-100 dark:bg-omail-700 text-omail-800 dark:text-omail-300 px-2 py-0.5 rounded-full text-xs">
                        @filteredNotifications.Count
                    </div>
                </div>
                
                @if (filteredNotifications.Any(n => !n.IsRead))
                {
                    <button @onclick="MarkAllAsRead" class="text-omail-600 dark:text-omail-400 hover:text-omail-800 dark:hover:text-omail-200 text-sm">
                        Mark all as read
                    </button>
                }
            </div>
            
            @if (isLoading)
            {
                <div class="py-12 flex flex-col items-center justify-center text-center">
                    <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-omail-600"></div>
                    <p class="mt-4 text-omail-600 dark:text-omail-400">Loading notifications...</p>
                </div>
            }
            else if (filteredNotifications.Count == 0)
            {
                <div class="py-12 flex flex-col items-center justify-center text-center">
                    <lord-icon
                        src="https://cdn.lordicon.com/msoeawqm.json"
                        trigger="loop"
                        delay="2000"
                        colors="primary:#121331,secondary:#818cf8"
                        class="w-16 h-16 mb-4">
                    </lord-icon>
                    <h3 class="text-lg font-medium text-omail-900 dark:text-omail-100 mb-1">No notifications found</h3>
                    <p class="text-sm text-omail-500 dark:text-omail-400 max-w-sm">
                        There are no notifications matching your filter criteria.
                    </p>
                </div>
            }
            else
            {
                <div class="divide-y divide-omail-200 dark:divide-omail-700">
                    @foreach (var notification in filteredNotifications)
                    {
                        <div class="p-6 flex items-start hover:bg-omail-50 dark:hover:bg-omail-700/30 transition-colors duration-150 @(notification.IsRead ? "" : "bg-omail-50 dark:bg-omail-800/70")">
                            <div class="flex-shrink-0">
                                @if (notification.Type == "approval")
                                {
                                    <div class="h-10 w-10 rounded-full bg-yellow-100 dark:bg-yellow-900/40 flex items-center justify-center text-yellow-700 dark:text-yellow-300">
                                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                }
                                else if (notification.Type == "user")
                                {
                                    <div class="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/40 flex items-center justify-center text-blue-700 dark:text-blue-300">
                                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                }
                                else if (notification.Type == "system")
                                {
                                    <div class="h-10 w-10 rounded-full bg-purple-100 dark:bg-purple-900/40 flex items-center justify-center text-purple-700 dark:text-purple-300">
                                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                }
                                else
                                {
                                    <div class="h-10 w-10 rounded-full bg-omail-100 dark:bg-omail-900/40 flex items-center justify-center text-omail-700 dark:text-omail-300">
                                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                }
                            </div>
                            
                            <div class="ml-4 flex-1">
                                <div class="flex items-center justify-between">
                                    <h4 class="text-lg font-medium text-omail-800 dark:text-white">@notification.Title</h4>
                                    <p class="text-sm text-omail-500 dark:text-omail-400">@notification.Time</p>
                                </div>
                                <p class="text-omail-600 dark:text-omail-300 mt-1">@notification.Message</p>
                                
                                <div class="mt-3 flex items-center">
                                    <a href="@notification.Link" class="inline-flex items-center text-sm text-omail-600 dark:text-omail-400 hover:text-omail-800 dark:hover:text-white mr-4">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                        </svg>
                                        View Details
                                    </a>
                                    
                                    @if (!notification.IsRead)
                                    {
                                        <button @onclick="() => MarkAsRead(notification)" class="inline-flex items-center text-sm text-omail-600 dark:text-omail-400 hover:text-omail-800 dark:hover:text-white">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                            </svg>
                                            Mark as Read
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Pagination (if needed) -->
                @if (totalPages > 1)
                {
                    <div class="px-6 py-3 border-t border-omail-200 dark:border-omail-700 flex items-center justify-between">
                        <button @onclick="PreviousPage" disabled="@(currentPage == 0)" class="@(currentPage == 0 ? "opacity-50 cursor-not-allowed" : "") px-3 py-1 border border-omail-300 dark:border-omail-700 rounded-md text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                            Previous
                        </button>
                        
                        <div class="text-sm text-omail-500 dark:text-omail-400">
                            Page @(currentPage + 1) of @totalPages
                        </div>
                        
                        <button @onclick="NextPage" disabled="@(currentPage == totalPages - 1)" class="@(currentPage == totalPages - 1 ? "opacity-50 cursor-not-allowed" : "") px-3 py-1 border border-omail-300 dark:border-omail-700 rounded-md text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                            Next
                        </button>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<AdminNotification> notifications = new List<AdminNotification>();
    private List<AdminNotification> filteredNotifications => AppliedFilters();
    
    // Filters
    private string selectedTypeFilter = "all";
    private string selectedStatusFilter = "all";
    private string selectedDateFilter = "all";
    
    // Pagination
    private int currentPage = 0;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling(filteredNotifications.Count / (double)pageSize);
    
    // Page selection for current view
    private List<AdminNotification> pagedNotifications => filteredNotifications
        .Skip(currentPage * pageSize)
        .Take(pageSize)
        .ToList();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }
    
    private async Task LoadNotifications()
    {
        try
        {
            isLoading = true;
            
            // This would typically come from a service
            // For now, let's create sample data
            notifications = new List<AdminNotification>
            {
                new AdminNotification
                {
                    Id = 1,
                    Type = "user",
                    Title = "New User Registration",
                    Message = "Jane Smith has registered and needs approval",
                    Time = "Just now",
                    Date = DateTime.Now,
                    Link = "/admin/users",
                    IsRead = false
                },
                new AdminNotification
                {
                    Id = 2,
                    Type = "approval",
                    Title = "Email Approval Required",
                    Message = "John Doe's email to external client needs review",
                    Time = "1 hour ago",
                    Date = DateTime.Now.AddHours(-1),
                    Link = "/admin/approval-workflow",
                    IsRead = false
                },
                new AdminNotification
                {
                    Id = 3,
                    Type = "system",
                    Title = "System Update Available",
                    Message = "Omail v1.1 update is available for installation",
                    Time = "Yesterday",
                    Date = DateTime.Now.AddDays(-1),
                    Link = "/admin/system-settings",
                    IsRead = true
                },
                new AdminNotification
                {
                    Id = 4,
                    Type = "system",
                    Title = "Storage Alert",
                    Message = "Email storage is at 85% capacity",
                    Time = "2 days ago",
                    Date = DateTime.Now.AddDays(-2),
                    Link = "/admin/system-settings",
                    IsRead = true
                },
                new AdminNotification
                {
                    Id = 5,
                    Type = "approval",
                    Title = "Department Creation Approval",
                    Message = "New Marketing department creation requires approval",
                    Time = "3 days ago",
                    Date = DateTime.Now.AddDays(-3),
                    Link = "/admin/organizations",
                    IsRead = false
                },
                new AdminNotification
                {
                    Id = 6,
                    Type = "user",
                    Title = "User Password Reset",
                    Message = "Michael Johnson has requested a password reset",
                    Time = "1 week ago",
                    Date = DateTime.Now.AddDays(-7),
                    Link = "/admin/users",
                    IsRead = true
                }
            };
            
            // For simplicity, add more data
            for (int i = 7; i <= 25; i++)
            {
                var randomType = new[] { "user", "approval", "system" }[new Random().Next(3)];
                var randomDaysAgo = new Random().Next(1, 30);
                var randomIsRead = new Random().Next(2) == 0;
                
                notifications.Add(new AdminNotification
                {
                    Id = i,
                    Type = randomType,
                    Title = $"Sample Notification {i}",
                    Message = $"This is a sample {randomType} notification for testing purposes",
                    Time = $"{randomDaysAgo} days ago",
                    Date = DateTime.Now.AddDays(-randomDaysAgo),
                    Link = $"/admin/{(randomType == "user" ? "users" : randomType == "approval" ? "approval-workflow" : "system-settings")}",
                    IsRead = randomIsRead
                });
            }
            
            await Task.Delay(500); // Simulate loading
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private List<AdminNotification> AppliedFilters()
    {
        var result = notifications.AsEnumerable();
        
        // Apply type filter
        if (selectedTypeFilter != "all")
        {
            result = result.Where(n => n.Type == selectedTypeFilter);
        }
        
        // Apply status filter
        if (selectedStatusFilter == "read")
        {
            result = result.Where(n => n.IsRead);
        }
        else if (selectedStatusFilter == "unread")
        {
            result = result.Where(n => !n.IsRead);
        }
        
        // Apply date filter
        if (selectedDateFilter == "today")
        {
            result = result.Where(n => n.Date.Date == DateTime.Today);
        }
        else if (selectedDateFilter == "yesterday")
        {
            result = result.Where(n => n.Date.Date == DateTime.Today.AddDays(-1));
        }
        else if (selectedDateFilter == "week")
        {
            result = result.Where(n => (DateTime.Now - n.Date).TotalDays <= 7);
        }
        else if (selectedDateFilter == "month")
        {
            result = result.Where(n => (DateTime.Now - n.Date).TotalDays <= 30);
        }
        
        // Sort by date (newest first)
        result = result.OrderByDescending(n => n.Date);
        
        return result.ToList();
    }
    
    private void ApplyFilters()
    {
        currentPage = 0; // Reset to first page when applying filters
    }
    
    private async Task MarkAsRead(AdminNotification notification)
    {
        notification.IsRead = true;
        // In a real app, you'd call a service to update the database
        await Task.CompletedTask;
    }
    
    private async Task MarkAllAsRead()
    {
        foreach (var notification in filteredNotifications)
        {
            notification.IsRead = true;
        }
        // In a real app, you'd call a service to update the database
        await Task.CompletedTask;
    }
    
    private void PreviousPage()
    {
        if (currentPage > 0)
            currentPage--;
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages - 1)
            currentPage++;
    }
    
    public class AdminNotification
    {
        public int Id { get; set; }
        public string Type { get; set; }
        public string Title { get; set; }
        public string Message { get; set; }
        public string Time { get; set; }
        public DateTime Date { get; set; }
        public string Link { get; set; }
        public bool IsRead { get; set; }
    }
}
