@page "/admin/users"
@attribute [Authorize(Roles = "Manager")]
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>User Management - Omail Admin</PageTitle>

<div class="space-y-6">
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
            <h1 class="text-3xl font-bold text-omail-800 dark:text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-omail-600 dark:text-omail-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                User Management
            </h1>
            <p class="text-omail-600 dark:text-omail-300 mt-2">Manage users, permissions and account settings</p>
        </div>
        <div class="flex flex-wrap gap-3">
            <button @onclick="@(() => NavigationManager.NavigateTo("/admin/users/new"))" class="flex items-center space-x-2 bg-omail-600 hover:bg-omail-700 text-white px-4 py-2 rounded-lg transition-all duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                <span>Add New User</span>
            </button>
            <button @onclick="@(() => NavigationManager.NavigateTo("/admin/users/import"))" class="flex items-center space-x-2 bg-omail-100 dark:bg-omail-700 text-omail-800 dark:text-white hover:bg-omail-200 dark:hover:bg-omail-600 px-4 py-2 rounded-lg transition-all duration-300">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
                </svg>
                <span>Bulk Import</span>
            </button>
        </div>
    </div>
    
    <!-- Search and Filters -->
    <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md p-6">
        <div class="flex flex-col md:flex-row gap-4">
            <div class="flex-grow">
                <div class="relative">
                    <input 
                        type="text" 
                        @bind-value="searchQuery" 
                        @bind-value:event="oninput" 
                        placeholder="Search users by name, email or position..."
                        class="w-full px-4 py-2 pl-10 pr-8 border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400" />
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center">
                        <svg class="h-5 w-5 text-omail-400 dark:text-omail-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(searchQuery))
                    {
                        <button @onclick="ClearSearch" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <svg class="h-5 w-5 text-omail-400 hover:text-omail-500 dark:text-omail-500 dark:hover:text-omail-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    }
                </div>
            </div>
            <div class="flex flex-wrap gap-3">
                <div>
                    <select @bind="selectedDepartment" class="border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 px-3 py-2">
                        <option value="0">All Departments</option>
                        @foreach (var department in departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>
                <div>
                    <select @bind="selectedRole" class="border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 px-3 py-2">
                        <option value="all">All Roles</option>
                        <option value="manager">Managers</option>
                        <option value="regular">Regular Users</option>
                    </select>
                </div>
                <div>
                    <select @bind="selectedStatus" class="border border-omail-200 dark:border-omail-700 rounded-lg bg-white dark:bg-omail-800/30 text-omail-800 dark:text-white focus:ring-2 focus:ring-omail-500 dark:focus:ring-omail-400 px-3 py-2">
                        <option value="all">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
                <button @onclick="ApplyFilters" class="bg-omail-600 hover:bg-omail-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                    Apply Filters
                </button>
            </div>
        </div>
    </div>
    
    <!-- Users Table -->
    <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
        @if (isLoading)
        {
            <div class="py-20 flex justify-center items-center">
                <div class="flex flex-col items-center space-y-4">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-omail-600"></div>
                    <p class="text-omail-600 dark:text-omail-400">Loading users...</p>
                </div>
            </div>
        }
        else if (!filteredUsers.Any())
        {
            <div class="py-16 flex flex-col items-center justify-center text-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-omail-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                </svg>
                <h3 class="text-lg font-medium text-omail-900 dark:text-omail-100 mb-1">No users found</h3>
                <p class="text-sm text-omail-500 dark:text-omail-400 mb-4 max-w-md">
                    @if (!string.IsNullOrEmpty(searchQuery) || selectedDepartment != 0 || selectedRole != "all" || selectedStatus != "all")
                    {
                        <span>No users match your search criteria. Try adjusting your filters.</span>
                    }
                    else
                    {
                        <span>No users found in the system. Start by adding a new user.</span>
                    }
                </p>
                <button @onclick="@(() => NavigationManager.NavigateTo("admin/users/new"))" class="flex items-center space-x-2 bg-omail-600 hover:bg-omail-700 text-white px-4 py-2 rounded-lg transition-all duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                    </svg>
                    <span>Add New User</span>
                </button>
            </div>
        }
        else
        {
            <!-- Bulk Actions -->
            @if (selectedUsers.Any())
            {
                <div class="bg-omail-50 dark:bg-omail-700/30 p-4 flex justify-between items-center">
                    <div class="text-sm text-omail-700 dark:text-omail-300">
                        <span class="font-medium">@selectedUsers.Count</span> users selected
                    </div>
                    <div class="flex space-x-2">
                        <button @onclick="BulkActivate" class="px-3 py-1 text-xs font-medium text-white bg-green-600 hover:bg-green-700 rounded transition-colors">Activate</button>
                        <button @onclick="BulkDeactivate" class="px-3 py-1 text-xs font-medium text-white bg-yellow-600 hover:bg-yellow-700 rounded transition-colors">Deactivate</button>
                        <button @onclick="ShowBulkDeleteConfirm" class="px-3 py-1 text-xs font-medium text-white bg-red-600 hover:bg-red-700 rounded transition-colors">Delete</button>
                    </div>
                </div>
            }
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-omail-200 dark:divide-omail-700">
                    <thead class="bg-omail-50 dark:bg-omail-800">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left">
                                <div class="flex items-center">
                                    <input 
                                        type="checkbox" 
                                        @bind="selectAll" 
                                        class="rounded border-omail-300 dark:border-omail-700 text-omail-600 shadow-sm focus:ring focus:ring-omail-500 focus:ring-opacity-50 dark:bg-omail-900 dark:focus:ring-omail-600"
                                    />
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-500 dark:text-omail-400 uppercase tracking-wider">
                                User
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-500 dark:text-omail-400 uppercase tracking-wider">
                                Role & Department
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-500 dark:text-omail-400 uppercase tracking-wider">
                                Status
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-omail-500 dark:text-omail-400 uppercase tracking-wider">
                                Joined
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-omail-500 dark:text-omail-400 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-omail-800/50 divide-y divide-omail-200 dark:divide-omail-700">
                        @foreach (var user in pagedUsers)
                        {
                            <tr class="hover:bg-omail-50 dark:hover:bg-omail-700/30 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <input 
                                        type="checkbox" 
                                        @bind="user.IsSelected" 
                                        class="rounded border-omail-300 dark:border-omail-700 text-omail-600 shadow-sm focus:ring focus:ring-omail-500 focus:ring-opacity-50 dark:bg-omail-900 dark:focus:ring-omail-600" 
                                    />
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10 relative">
                                            @if (string.IsNullOrEmpty(user.ProfilePicture))
                                            {
                                                <div class="h-10 w-10 rounded-full bg-omail-200 dark:bg-omail-700 flex items-center justify-center text-omail-700 dark:text-omail-200 font-medium">
                                                    @user.Initials
                                                </div>
                                            }
                                            else
                                            {
                                                <img class="h-10 w-10 rounded-full" src="@user.ProfilePicture" alt="@user.FullName" />
                                            }
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-omail-900 dark:text-omail-100">@user.FullName</div>
                                            <div class="text-sm text-omail-500 dark:text-omail-400">@user.Email</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div>
                                        <div class="text-sm text-omail-900 dark:text-omail-100">
                                            @(user.IsManager ? "Manager" : "User")
                                        </div>
                                        <div class="text-sm text-omail-500 dark:text-omail-400">
                                            @(string.IsNullOrEmpty(user.Department) ? "-" : user.Department)
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2.5 py-1 inline-flex text-xs leading-5 font-semibold rounded-full @(user.IsActive ? "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-400" : "bg-red-100 text-red-800 dark:bg-red-900/40 dark:text-red-400")">
                                        @(user.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-omail-500 dark:text-omail-400">
                                    @user.HireDate.ToString("yyyy-MM-dd")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-right">
                                    <div class="flex justify-end space-x-2">
                                        <button @onclick="() => EditUser(user)" class="text-omail-600 hover:text-omail-900 dark:text-omail-400 dark:hover:text-omail-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                            </svg>
                                        </button>
                                        @if (user.IsActive)
                                        {
                                            <button @onclick="() => DeactivateUser(user)" class="text-yellow-600 hover:text-yellow-900 dark:text-yellow-500 dark:hover:text-yellow-300">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z" clip-rule="evenodd" />
                                                </svg>
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="() => ActivateUser(user)" class="text-green-600 hover:text-green-900 dark:text-green-500 dark:hover:text-green-300">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                                </svg>
                                            </button>
                                        }
                                        <button @onclick="() => ShowDeleteConfirm(user)" class="text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-300">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="bg-white dark:bg-omail-800/50 px-4 py-3 flex items-center justify-between border-t border-omail-200 dark:border-omail-700 sm:px-6">
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-omail-700 dark:text-omail-300">
                                Showing <span class="font-medium">@(currentPage * pageSize + 1)</span> to <span class="font-medium">@(Math.Min((currentPage + 1) * pageSize, filteredUsers.Count))</span> of <span class="font-medium">@filteredUsers.Count</span> results
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                                <button @onclick="PreviousPage" disabled="@(currentPage == 0)" class="@(currentPage == 0 ? "cursor-not-allowed opacity-50" : "") relative inline-flex items-center px-2 py-2 rounded-l-md border border-omail-300 dark:border-omail-700 bg-white dark:bg-omail-800 text-sm font-medium text-omail-500 dark:text-omail-400 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                                    <span class="sr-only">Previous</span>
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                                
                                @for (int i = 0; i < totalPages; i++)
                                {
                                    var pageNumber = i;
                                    <button 
                                        @onclick="() => GoToPage(pageNumber)" 
                                        class="relative inline-flex items-center px-4 py-2 border border-omail-300 dark:border-omail-700 @(pageNumber == currentPage ? "bg-omail-100 dark:bg-omail-700 text-omail-800 dark:text-white font-bold" : "bg-white dark:bg-omail-800 text-omail-500 dark:text-omail-400 hover:bg-omail-50 dark:hover:bg-omail-700/50") text-sm font-medium">
                                        @(pageNumber + 1)
                                    </button>
                                }
                                
                                <button @onclick="NextPage" disabled="@(currentPage == totalPages - 1)" class="@(currentPage == totalPages - 1 ? "cursor-not-allowed opacity-50" : "") relative inline-flex items-center px-2 py-2 rounded-r-md border border-omail-300 dark:border-omail-700 bg-white dark:bg-omail-800 text-sm font-medium text-omail-500 dark:text-omail-400 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                                    <span class="sr-only">Next</span>
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4-4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </nav>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Confirmation Dialog -->
@if (showConfirmation)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-omail-800 p-6 rounded-xl shadow-xl max-w-md w-full">
            <h3 class="text-lg font-bold text-omail-900 dark:text-white mb-2">@confirmationTitle</h3>
            <p class="text-omail-600 dark:text-omail-300 mb-6">@confirmationMessage</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="CancelConfirmation" class="px-4 py-2 border border-omail-300 dark:border-omail-700 rounded-lg text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                    Cancel
                </button>
                <button @onclick="ConfirmAction" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                    @confirmationButtonText
                </button>
            </div>
        </div>
    </div>
}

@code {
    // Data
    private List<UserViewModel> users = new List<UserViewModel>();
    private List<Department> departments = new List<Department>();
    private bool isLoading = true;
    
    // Search and Filter
    private string searchQuery = "";
    private int selectedDepartment = 0;
    private string selectedRole = "all";
    private string selectedStatus = "all";
    
    // Pagination
    private int currentPage = 0;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling(filteredUsers.Count / (double)pageSize);
    private List<UserViewModel> filteredUsers => ApplyUserFilters().ToList();
    private List<UserViewModel> pagedUsers => filteredUsers.Skip(currentPage * pageSize).Take(pageSize).ToList();
    
    // Selection
    private bool _selectAll;
    private bool selectAll 
    { 
        get => _selectAll; 
        set 
        {
            _selectAll = value;
            foreach (var user in users)
            {
                user.IsSelected = _selectAll;
            }
        }
    }
    private List<UserViewModel> selectedUsers => users.Where(u => u.IsSelected).ToList();
    
    // Confirmation Dialog
    private bool showConfirmation = false;
    private string confirmationTitle;
    private string confirmationMessage;
    private string confirmationButtonText = "Delete";
    private Func<Task> confirmationAction;
    private UserViewModel selectedUser;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Load departments
            departments = await AuthService.GetDepartmentsAsync();
            
            // Load users
            var loadedUsers = await AuthService.GetUsersAsync();
            users = loadedUsers.Select(user => new UserViewModel
            {
                Id = user.Id,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                ProfilePicture = user.ProfilePicture,
                Position = user.Position,
                IsManager = user.IsManager,
                IsActive = user.IsActive,
                HireDate = user.HireDate,
                Department = user.Section?.Department?.Name ?? "-",
                DepartmentId = user.Section?.DepartmentId ?? 0,
                SectionId = user.SectionId,
                IsSelected = false
            }).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private IEnumerable<UserViewModel> ApplyUserFilters()
    {
        var result = users.AsEnumerable();
        
        // Apply search filter
        if (!string.IsNullOrEmpty(searchQuery))
        {
            string search = searchQuery.ToLower();
            result = result.Where(u => 
                u.FirstName.ToLower().Contains(search) ||
                u.LastName.ToLower().Contains(search) ||
                u.Email.ToLower().Contains(search) ||
                (u.Position?.ToLower().Contains(search) ?? false) ||
                (u.Department?.ToLower().Contains(search) ?? false)
            );
        }
        
        // Apply department filter
        if (selectedDepartment > 0)
        {
            result = result.Where(u => u.DepartmentId == selectedDepartment);
        }
        
        // Apply role filter
        if (selectedRole != "all")
        {
            bool isManager = selectedRole == "manager";
            result = result.Where(u => u.IsManager == isManager);
        }
        
        // Apply status filter
        if (selectedStatus != "all")
        {
            bool isActive = selectedStatus == "active";
            result = result.Where(u => u.IsActive == isActive);
        }
        
        return result;
    }
    
    private void ApplyFilters()
    {
        currentPage = 0;
        StateHasChanged();
    }
    
    private void ClearSearch()
    {
        searchQuery = "";
        ApplyFilters();
    }
    
    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            StateHasChanged();
        }
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
            StateHasChanged();
        }
    }
    
    private void GoToPage(int page)
    {
        if (page >= 0 && page < totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }
    
    private void EditUser(UserViewModel user)
    {
        NavigationManager.NavigateTo($"admin/users/edit/{user.Id}");
    }
    
    private async Task ActivateUser(UserViewModel user)
    {
        try
        {
            await AuthService.ActivateUserAsync(user.Id);
            user.IsActive = true;
            await JSRuntime.InvokeVoidAsync("alert", $"User {user.FullName} has been activated");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private async Task DeactivateUser(UserViewModel user)
    {
        try
        {
            await AuthService.DeactivateUserAsync(user.Id);
            user.IsActive = false;
            await JSRuntime.InvokeVoidAsync("alert", $"User {user.FullName} has been deactivated");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private void ShowDeleteConfirm(UserViewModel user)
    {
        selectedUser = user;
        confirmationTitle = "Delete User";
        confirmationMessage = $"Are you sure you want to delete the user '{user.FullName}'? This action cannot be undone.";
        confirmationButtonText = "Delete";
        confirmationAction = DeleteUser;
        showConfirmation = true;
    }
    
    private async Task DeleteUser()
    {
        try
        {
            await AuthService.DeleteUserAsync(selectedUser.Id);
            users.Remove(selectedUser);
            await JSRuntime.InvokeVoidAsync("alert", $"User {selectedUser.FullName} has been deleted");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private async Task BulkActivate()
    {
        try
        {
            foreach (var user in selectedUsers)
            {
                if (!user.IsActive)
                {
                    await AuthService.ActivateUserAsync(user.Id);
                    user.IsActive = true;
                }
            }
            
            selectAll = false;
            await JSRuntime.InvokeVoidAsync("alert", $"{selectedUsers.Count} users have been activated");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private async Task BulkDeactivate()
    {
        try
        {
            foreach (var user in selectedUsers)
            {
                if (user.IsActive)
                {
                    await AuthService.DeactivateUserAsync(user.Id);
                    user.IsActive = false;
                }
            }
            
            selectAll = false;
            await JSRuntime.InvokeVoidAsync("alert", $"{selectedUsers.Count} users have been deactivated");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private void ShowBulkDeleteConfirm()
    {
        confirmationTitle = "Delete Multiple Users";
        confirmationMessage = $"Are you sure you want to delete {selectedUsers.Count} users? This action cannot be undone.";
        confirmationButtonText = "Delete All Selected";
        confirmationAction = BulkDelete;
        showConfirmation = true;
    }
    
    private async Task BulkDelete()
    {
        try
        {
            foreach (var user in selectedUsers.ToList())
            {
                await AuthService.DeleteUserAsync(user.Id);
                users.Remove(user);
            }
            
            selectAll = false;
            await JSRuntime.InvokeVoidAsync("alert", $"{selectedUsers.Count} users have been deleted");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private void CancelConfirmation()
    {
        showConfirmation = false;
        confirmationAction = null;
    }
    
    private async Task ConfirmAction()
    {
        showConfirmation = false;
        if (confirmationAction != null)
        {
            await confirmationAction();
        }
    }
    
    public class UserViewModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName => $"{FirstName} {LastName}";
        public string Email { get; set; }
        public string ProfilePicture { get; set; }
        public string Position { get; set; }
        public bool IsManager { get; set; }
        public bool IsActive { get; set; }
        public DateTime HireDate { get; set; }
        public string Department { get; set; }
        public int DepartmentId { get; set; }
        public int SectionId { get; set; }
        public bool IsSelected { get; set; }
        
        public string Initials => $"{FirstName?.FirstOrDefault() ?? '?'}{LastName?.FirstOrDefault() ?? '?'}";
    }
}
