@page "/admin/users/new"
@page "/admin/users/edit/{UserId:int}"
@attribute [Authorize(Roles = "Manager")]
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@(IsNewUser ? "Add New User" : "Edit User") - Omail Admin</PageTitle>

<div class="space-y-6">
    <AdminHeader 
        Title="@(IsNewUser ? "Add New User" : "Edit User")" 
        Description="@(IsNewUser ? "Create a new user account" : "Modify user account details")" 
        PrimaryButtonText="Return to Users" 
        PrimaryButtonUrl="admin/users"
        PrimaryButtonIcon="https://cdn.lordicon.com/iifryyua.json" />
    
    @if (isLoading)
    {
        <div class="flex justify-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-omail-600"></div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Main Form Column -->
            <div class="lg:col-span-2">
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
                    <div class="px-6 py-4 border-b border-omail-200 dark:border-omail-700">
                        <h3 class="text-lg font-medium text-omail-800 dark:text-white">
                            User Information
                        </h3>
                    </div>
                    
                    <div class="p-6">
                        <EditForm Model="userModel" OnValidSubmit="HandleValidSubmit" class="space-y-6">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-red-500 text-sm mb-4" />

                            <!-- Basic Information -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="firstName" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">First Name</label>
                                    <InputText 
                                        id="firstName" 
                                        @bind-Value="userModel.FirstName" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                    />
                                    <ValidationMessage For="@(() => userModel.FirstName)" class="text-red-500 text-xs mt-1" />
                                </div>
                                
                                <div>
                                    <label for="lastName" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Last Name</label>
                                    <InputText 
                                        id="lastName" 
                                        @bind-Value="userModel.LastName" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                    />
                                    <ValidationMessage For="@(() => userModel.LastName)" class="text-red-500 text-xs mt-1" />
                                </div>
                            </div>
                            
                            <div>
                                <label for="email" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Email Address</label>
                                <InputText 
                                    id="email" 
                                    @bind-Value="userModel.Email" 
                                    type="email"
                                    class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                />
                                <ValidationMessage For="@(() => userModel.Email)" class="text-red-500 text-xs mt-1" />
                            </div>

                            <!-- Department & Section -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="department" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Department</label>
                                    <select 
                                        id="department" 
                                        @onchange="OnDepartmentChange" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50">
                                        <option value="">-- Select Department --</option>
                                        @foreach (var dept in departments)
                                        {
                                            <option value="@dept.Id" selected="@(selectedDepartmentId == dept.Id)">@dept.Name</option>
                                        }
                                    </select>
                                </div>
                                
                                <div>
                                    <label for="section" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Section</label>
                                    <select 
                                        id="section" 
                                        @bind="userModel.SectionId" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                        disabled="@(filteredSections.Count == 0)">
                                        <option value="">-- Select Section --</option>
                                        @foreach (var sec in filteredSections)
                                        {
                                            <option value="@sec.Id">@sec.Name</option>
                                        }
                                    </select>
                                    <ValidationMessage For="@(() => userModel.SectionId)" class="text-red-500 text-xs mt-1" />
                                </div>
                            </div>

                            <!-- Job Position & Phone -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="position" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Job Position</label>
                                    <InputText 
                                        id="position" 
                                        @bind-Value="userModel.Position" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                    />
                                    <ValidationMessage For="@(() => userModel.Position)" class="text-red-500 text-xs mt-1" />
                                </div>
                                
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Phone Number</label>
                                    <InputText 
                                        id="phone" 
                                        @bind-Value="userModel.PhoneNumber" 
                                        class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                    />
                                    <ValidationMessage For="@(() => userModel.PhoneNumber)" class="text-red-500 text-xs mt-1" />
                                </div>
                            </div>

                            <!-- Password Section (for new users) -->
                            @if (IsNewUser || showChangePassword)
                            {
                                <div>
                                    <div class="flex items-center justify-between">
                                        <h4 class="text-md font-medium text-omail-800 dark:text-white">@(IsNewUser ? "Set Password" : "Change Password")</h4>
                                        @if (!IsNewUser)
                                        {
                                            <button type="button" @onclick="ToggleChangePassword" class="text-sm text-omail-600 hover:text-omail-900 dark:text-omail-400 dark:hover:text-omail-300">
                                                Cancel
                                            </button>
                                        }
                                    </div>
                                    <div class="mt-3 grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <label for="password" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">@(IsNewUser ? "Password" : "New Password")</label>
                                            <InputText 
                                                id="password" 
                                                @bind-Value="userModel.Password" 
                                                type="password"
                                                class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                            />
                                            <ValidationMessage For="@(() => userModel.Password)" class="text-red-500 text-xs mt-1" />
                                        </div>
                                        
                                        <div>
                                            <label for="confirmPassword" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Confirm Password</label>
                                            <InputText 
                                                id="confirmPassword" 
                                                @bind-Value="userModel.ConfirmPassword" 
                                                type="password"
                                                class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                            />
                                            <ValidationMessage For="@(() => userModel.ConfirmPassword)" class="text-red-500 text-xs mt-1" />
                                        </div>
                                    </div>
                                    
                                    @if (IsNewUser)
                                    {
                                        <div class="mt-3 flex items-center justify-between">
                                            <button type="button" @onclick="GeneratePassword" class="text-sm text-omail-600 hover:text-omail-900 dark:text-omail-400 dark:hover:text-omail-300 flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                                                </svg>
                                                Generate Password
                                            </button>
                                            <span class="text-sm text-omail-500 dark:text-omail-400">Password must be at least 8 characters long</span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div>
                                    <button type="button" @onclick="ToggleChangePassword" class="text-sm text-omail-600 hover:text-omail-900 dark:text-omail-400 dark:hover:text-omail-300 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                                        </svg>
                                        Change Password
                                    </button>
                                </div>
                            }
                            
                            <!-- Submit Buttons -->
                            <div class="pt-3 flex justify-end space-x-3 border-t border-omail-200 dark:border-omail-700">
                                <button type="button" @onclick="CancelEdit" class="px-4 py-2 border border-omail-300 dark:border-omail-700 rounded-lg text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                                    Cancel
                                </button>
                                <button type="submit" class="px-4 py-2 bg-omail-600 text-white rounded-lg hover:bg-omail-700">
                                    @(IsNewUser ? "Create User" : "Save Changes")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            
            <!-- Side Column -->
            <div>
                <div class="bg-white dark:bg-omail-800/50 rounded-xl shadow-md overflow-hidden">
                    <div class="px-6 py-4 border-b border-omail-200 dark:border-omail-700">
                        <h3 class="text-lg font-medium text-omail-800 dark:text-white">
                            User Settings
                        </h3>
                    </div>
                    
                    <div class="p-6 space-y-6">
                        <!-- Profile Picture -->
                        <div>
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    @if (string.IsNullOrEmpty(userModel.ProfilePicture))
                                    {
                                        <div class="h-20 w-20 rounded-full bg-omail-200 dark:bg-omail-700 flex items-center justify-center text-omail-700 dark:text-omail-200 text-2xl font-medium">
                                            @userModel.GetInitials()
                                        </div>
                                    }
                                    else
                                    {
                                        <img class="h-20 w-20 rounded-full object-cover" src="@userModel.ProfilePicture" alt="Profile Picture" />
                                    }
                                </div>
                                <div class="ml-5">
                                    <button type="button" class="px-3 py-1.5 border border-omail-300 dark:border-omail-700 rounded-md text-omail-700 dark:text-omail-300 text-sm hover:bg-omail-50 dark:hover:bg-omail-700/50">
                                        Change Avatar
                                    </button>
                                    @if (!string.IsNullOrEmpty(userModel.ProfilePicture))
                                    {
                                        <button type="button" @onclick="RemoveProfilePicture" class="mt-2 text-sm text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 flex items-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                            Remove
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <!-- User Role -->
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-2">User Role</label>
                            <div class="space-y-2">
                                <div class="flex items-center">
                                    <input 
                                        id="role-user" 
                                        type="radio" 
                                        name="user-role" 
                                        value="user" 
                                        checked="@(!userModel.IsManager)"
                                        @onchange="() => userModel.IsManager = false"
                                        class="mr-2 h-4 w-4 text-omail-600 border-omail-300 dark:border-omail-700 focus:ring-omail-500" />
                                    <label for="role-user" class="text-sm text-omail-700 dark:text-omail-300">
                                        Regular User
                                    </label>
                                </div>
                                <div class="flex items-center">
                                    <input 
                                        id="role-manager" 
                                        type="radio" 
                                        name="user-role" 
                                        value="manager" 
                                        checked="@(userModel.IsManager)"
                                        @onchange="() => userModel.IsManager = true"
                                        class="mr-2 h-4 w-4 text-omail-600 border-omail-300 dark:border-omail-700 focus:ring-omail-500" />
                                    <label for="role-manager" class="text-sm text-omail-700 dark:text-omail-300">
                                        Manager
                                    </label>
                                </div>
                            </div>
                            <p class="mt-1 text-xs text-omail-500 dark:text-omail-400">
                                Managers have additional permissions including approval workflows and access to the admin panel.
                            </p>
                        </div>
                        
                        <!-- User Status -->
                        <div>
                            <label class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-2">Account Status</label>
                            <div class="relative inline-block w-10 mr-2 align-middle select-none">
                                <input 
                                    type="checkbox" 
                                    id="status-toggle" 
                                    @bind="userModel.IsActive" 
                                    class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white dark:bg-omail-200 border-4 border-omail-300 dark:border-omail-700 appearance-none cursor-pointer"
                                />
                                <label for="status-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 dark:bg-omail-700 cursor-pointer"></label>
                            </div>
                            <label for="status-toggle" class="ml-2 text-sm text-omail-700 dark:text-omail-300">
                                @(userModel.IsActive ? "Active" : "Inactive")
                            </label>
                            <p class="mt-1 text-xs text-omail-500 dark:text-omail-400">
                                Inactive users cannot log in or use the system but their data is preserved.
                            </p>
                        </div>
                        
                        <!-- Join Date -->
                        @if (!IsNewUser)
                        {
                            <div>
                                <label class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-2">Join Date</label>
                                <div class="text-sm text-omail-900 dark:text-white">
                                    @userModel.HireDate.ToString("MMMM d, yyyy")
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>
                                <label for="hireDate" class="block text-sm font-medium text-omail-700 dark:text-omail-300 mb-1">Join Date</label>
                                <InputDate 
                                    id="hireDate" 
                                    @bind-Value="userModel.HireDate" 
                                    class="mt-1 block w-full rounded-md border border-omail-300 dark:border-omail-700 py-2 px-3 bg-white dark:bg-omail-800/30 text-omail-900 dark:text-white shadow-sm focus:border-omail-500 focus:ring focus:ring-omail-500 focus:ring-opacity-50" 
                                />
                            </div>
                        }
                        
                        <!-- Advanced Actions for existing users -->
                        @if (!IsNewUser)
                        {
                            <div class="pt-4 border-t border-omail-200 dark:border-omail-700">
                                <h4 class="text-sm font-medium text-omail-700 dark:text-omail-300 mb-3">User Actions</h4>
                                <div class="space-y-2">
                                    <button @onclick="ResetPassword" type="button" class="w-full flex items-center justify-center px-3 py-2 border border-omail-300 dark:border-omail-700 rounded-md text-sm text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                        </svg>
                                        Send Password Reset Email
                                    </button>
                                    <button @onclick="DeactivateUser" type="button" class="w-full flex items-center justify-center px-3 py-2 border border-yellow-300 dark:border-yellow-800 rounded-md text-sm text-yellow-700 dark:text-yellow-300 hover:bg-yellow-50 dark:hover:bg-yellow-900/30">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" />
                                        </svg>
                                        Deactivate Account
                                    </button>
                                    <button @onclick="DeleteUser" type="button" class="w-full flex items-center justify-center px-3 py-2 border border-red-300 dark:border-red-800 rounded-md text-sm text-red-700 dark:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/30">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                        Delete User
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Confirmation Dialog -->
@if (showConfirmation)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white dark:bg-omail-800 p-6 rounded-xl shadow-xl max-w-md w-full">
            <h3 class="text-lg font-bold text-omail-900 dark:text-white mb-2">@confirmationTitle</h3>
            <p class="text-omail-600 dark:text-omail-300 mb-6">@confirmationMessage</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="CancelConfirmation" class="px-4 py-2 border border-omail-300 dark:border-omail-700 rounded-lg text-omail-700 dark:text-omail-300 hover:bg-omail-50 dark:hover:bg-omail-700/50">
                    Cancel
                </button>
                <button @onclick="ConfirmAction" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                    @confirmationButtonText
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int UserId { get; set; }
    
    private bool IsNewUser => UserId == 0;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isProcessing = false;
    private string errorMessage;
    private string successMessage;
    private UserModel userModel = new UserModel();
    private List<Department> departments = new List<Department>();
    private List<Section> allSections = new List<Section>();
    private List<Section> filteredSections => allSections.Where(s => s.DepartmentId == selectedDepartmentId).ToList();
    private int selectedDepartmentId = 0;
    private bool showChangePassword = false;
    
    // Confirmation dialog
    private bool showConfirmation = false;
    private string confirmationTitle;
    private string confirmationMessage;
    private string confirmationButtonText = "Delete";
    private Func<Task> confirmationAction;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        if (!IsNewUser)
        {
            await LoadUser();
        }
        else
        {
            // Set default values for new user
            userModel = new UserModel
            {
                IsActive = true,
                HireDate = DateTime.Today
            };
            isLoading = false;
        }
    }
    
    private async Task LoadData()
    {
        try
        {
            // Load departments
            departments = await AuthService.GetDepartmentsAsync();
            
            // Load all sections
            allSections = await AuthService.GetSectionsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }
    
    private async Task LoadUser()
    {
        try
        {
            var employee = await AuthService.GetUserByIdAsync(UserId);
            
            if (employee == null)
            {
                NavigationManager.NavigateTo("admin/users");
                return;
            }
            
            userModel = new UserModel
            {
                Id = employee.Id,
                FirstName = employee.FirstName,
                LastName = employee.LastName,
                Email = employee.Email,
                PhoneNumber = employee.PhoneNumber,
                Position = employee.Position,
                ProfilePicture = employee.ProfilePicture,
                IsManager = employee.IsManager,
                IsActive = employee.IsActive,
                SectionId = employee.SectionId,
                HireDate = employee.HireDate
            };
            
            // Find the department ID
            var section = allSections.FirstOrDefault(s => s.Id == employee.SectionId);
            if (section != null)
            {
                selectedDepartmentId = section.DepartmentId;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading user: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void OnDepartmentChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var departmentId))
        {
            selectedDepartmentId = departmentId;
            userModel.SectionId = 0; // Reset section when department changes
        }
        else
        {
            selectedDepartmentId = 0;
        }
    }
    
    private void ToggleChangePassword()
    {
        showChangePassword = !showChangePassword;
        
        if (!showChangePassword)
        {
            userModel.Password = string.Empty;
            userModel.ConfirmPassword = string.Empty;
        }
    }
    
    private async Task GeneratePassword()
    {
        // Generate a random password with letters, numbers, and special characters
        const string chars = "ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789!@#$%^&*";
        var random = new Random();
        var password = new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        
        userModel.Password = password;
        userModel.ConfirmPassword = password;
        
        await JSRuntime.InvokeVoidAsync("alert", $"Generated password: {password}\n\nPlease make note of this password as it will be required for the user to log in.");
    }
    
    private async Task HandleValidSubmit()
    {
        await SaveUser();
    }
    
    private async Task SaveUser()
    {
        try
        {
            isSaving = true;
            
            // Convert local UserModel to AuthService.UserModel
            var serviceUserModel = new Services.AuthService.UserModel
            {
                Id = userModel.Id,
                FirstName = userModel.FirstName,
                LastName = userModel.LastName,
                Email = userModel.Email,
                Position = userModel.Position,
                SectionId = userModel.SectionId, // SectionId contains the department relationship
                IsManager = userModel.IsManager,
                IsActive = userModel.IsActive
            };
            
            if (IsNewUser)
            {
                // Create new user
                await AuthService.CreateUserAsync(serviceUserModel);
                NavigationManager.NavigateTo("admin/users");
            }
            else
            {
                // Update existing user
                await AuthService.UpdateUserAsync(serviceUserModel);
                NavigationManager.NavigateTo("admin/users");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving user: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private void CancelEdit()
    {
        NavigationManager.NavigateTo("admin/users");
    }
    
    private void RemoveProfilePicture()
    {
        userModel.ProfilePicture = string.Empty;
    }
    
    private async Task ResetPassword()
    {
        try
        {
            isProcessing = true;
            
            // Replace with available method in AuthService
            await AuthService.ResetUserPasswordAsync(userModel.Id);
            
            successMessage = "Password reset email sent successfully.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error sending password reset: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private async Task DeactivateUser()
    {
        try
        {
            isProcessing = true;
            
            // Replace with available method in AuthService
            await AuthService.SetUserActiveStatusAsync(userModel.Id, false);
            
            userModel.IsActive = false;
            successMessage = "User account has been deactivated.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deactivating user: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
    
    private void DeleteUser()
    {
        confirmationTitle = "Delete User";
        confirmationMessage = $"Are you sure you want to delete {userModel.FirstName} {userModel.LastName}? This action cannot be undone.";
        confirmationButtonText = "Delete";
        confirmationAction = ConfirmDelete;
        showConfirmation = true;
    }
    
    private async Task ConfirmDelete()
    {
        try
        {
            await AuthService.DeleteUserAsync(userModel.Id);
            await JSRuntime.InvokeVoidAsync("alert", $"User {userModel.FirstName} {userModel.LastName} has been deleted successfully.");
            NavigationManager.NavigateTo("admin/users");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
        }
    }
    
    private void CancelConfirmation()
    {
        showConfirmation = false;
        confirmationAction = null;
    }
    
    private async Task ConfirmAction()
    {
        showConfirmation = false;
        if (confirmationAction != null)
        {
            await confirmationAction();
        }
    }

    public class UserModel
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "First name is required")]
        [StringLength(100, ErrorMessage = "First name cannot be longer than 100 characters")]
        public string FirstName { get; set; }
        
        [Required(ErrorMessage = "Last name is required")]
        [StringLength(100, ErrorMessage = "Last name cannot be longer than 100 characters")]
        public string LastName { get; set; }
        
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [StringLength(100, ErrorMessage = "Email cannot be longer than 100 characters")]
        public string Email { get; set; }
        
        [StringLength(15, ErrorMessage = "Phone number cannot be longer than 15 characters")]
        public string PhoneNumber { get; set; }
        
        [StringLength(100, ErrorMessage = "Position cannot be longer than 100 characters")]
        public string Position { get; set; }
        
        public string ProfilePicture { get; set; } = string.Empty;
        
        public bool IsManager { get; set; }
        
        public bool IsActive { get; set; }
        
        [Required(ErrorMessage = "Section is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a section")]
        public int SectionId { get; set; }
        
        public int DepartmentId { get; set; }
        
        public DateTime HireDate { get; set; } = DateTime.Today;
        
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters long")]
        public string Password { get; set; } = string.Empty;
        
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
        
        public string GetInitials()
        {
            return $"{(string.IsNullOrEmpty(FirstName) ? "?" : FirstName[0])}{(string.IsNullOrEmpty(LastName) ? "?" : LastName[0])}";
        }
    }
}
